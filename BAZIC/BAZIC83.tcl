# TI-83/84 TI-BASIC Detokenizer HexFiend template include
# Version 2.0
# (c) 2021-2023 LogicalJoe
# .hidden = true;


proc BAZIC83_GetToken {term {iceT 0}} {
set	BAZIC_00 [dict create \
	0x01 ">DMS" \
	0x02 ">Dec" \
	0x03 ">Frac" \
	0x04 "->" \
	0x05 "Boxplot" \
	0x06 "\[" \
	0x07 "]" \
	0x08 "{" \
	0x09 "}" \
	0x0A "^^r" \
	0x0B "^^o" \
	0x0C "^^-1" \
	0x0D "^^2" \
	0x0E "^^T" \
	0x0F "^^3" \
	0x10 "(" \
	0x11 ")" \
	0x12 "round(" \
	0x13 "pxl-Test(" \
	0x14 "augment(" \
	0x15 "rowSwap(" \
	0x16 "row+(" \
	0x17 "*row(" \
	0x18 "*row+(" \
	0x19 "max(" \
	0x1A "min(" \
	0x1B "R>Pr(" \
	0x1C "R>Ptheta(" \
	0x1D "P>Rx(" \
	0x1E "P>Ry(" \
	0x1F "median(" \
	0x20 "randM(" \
	0x21 "mean(" \
	0x22 "solve(" \
	0x23 "seq(" \
	0x24 "fnInt(" \
	0x25 "nDeriv(" \
	0x27 "fMin(" \
	0x28 "fMax(" \
	0x29 " " \
	0x2A "\"" \
	0x2B "," \
	0x2C "\[i]" \
	0x2D "!" \
	0x2E "CubicReg " \
	0x2F "QuartReg " \
	0x30 "0" \
	0x31 "1" \
	0x32 "2" \
	0x33 "3" \
	0x34 "4" \
	0x35 "5" \
	0x36 "6" \
	0x37 "7" \
	0x38 "8" \
	0x39 "9" \
	0x3A "." \
	0x3B "|E" \
	0x3C " or " \
	0x3D " xor " \
	0x3E ":" \
	0x3F "\n" \
	0x40 " and " \
	0x41 "A" \
	0x42 "B" \
	0x43 "C" \
	0x44 "D" \
	0x45 "E" \
	0x46 "F" \
	0x47 "G" \
	0x48 "H" \
	0x49 "I" \
	0x4A "J" \
	0x4B "K" \
	0x4C "L" \
	0x4D "M" \
	0x4E "N" \
	0x4F "O" \
	0x50 "P" \
	0x51 "Q" \
	0x52 "R" \
	0x53 "S" \
	0x54 "T" \
	0x55 "U" \
	0x56 "V" \
	0x57 "W" \
	0x58 "X" \
	0x59 "Y" \
	0x5A "Z" \
	0x5B "theta" \
	0x5F "prgm" \
	0x64 "Radian" \
	0x65 "Degree" \
	0x66 "Normal" \
	0x67 "Sci" \
	0x68 "Eng" \
	0x69 "Float" \
	0x6A "=" \
	0x6B "<" \
	0x6C ">" \
	0x6D "<=" \
	0x6E ">=" \
	0x6F "!=" \
	0x70 "+" \
	0x71 "-" \
	0x72 "Ans" \
	0x73 "Fix " \
	0x74 "Horiz" \
	0x75 "Full" \
	0x76 "Func" \
	0x77 "Param" \
	0x78 "Polar" \
	0x79 "Seq" \
	0x7A "IndpntAuto" \
	0x7B "IndpntAsk" \
	0x7C "DependAuto" \
	0x7D "DependAsk" \
	0x7E "Graph Format" \
	0x7F "plotsquare" \
	0x80 "plotcross" \
	0x81 "plotdot" \
	0x82 "*" \
	0x83 "/" \
	0x84 "Trace" \
	0x85 "ClrDraw" \
	0x86 "ZStandard" \
	0x87 "ZTrig" \
	0x88 "ZBox" \
	0x89 "Zoom In" \
	0x8A "Zoom Out" \
	0x8B "ZSquare" \
	0x8C "ZInteger" \
	0x8D "ZPrevious" \
	0x8E "ZDecimal" \
	0x8F "ZoomStat" \
	0x90 "ZoomRcl" \
	0x91 "PrintScreen" \
	0x92 "ZoomSto" \
	0x93 "Text(" \
	0x94 " nPr " \
	0x95 " nCr " \
	0x96 "FnOn " \
	0x97 "FnOff " \
	0x98 "StorePic " \
	0x99 "RecallPic " \
	0x9A "StoreGDB " \
	0x9B "RecallGDB " \
	0x9C "Line(" \
	0x9D "Vertical " \
	0x9E "Pt-On(" \
	0x9F "Pt-Off(" \
	0xA0 "Pt-Change(" \
	0xA1 "Pxl-On(" \
	0xA2 "Pxl-Off(" \
	0xA3 "Pxl-Change(" \
	0xA4 "Shade(" \
	0xA5 "Circle(" \
	0xA6 "Horizontal " \
	0xA7 "Tangent(" \
	0xA8 "DrawInv " \
	0xA9 "DrawF " \
	0xAB "rand" \
	0xAC "pi" \
	0xAD "getKey" \
	0xAE "'" \
	0xAF "?" \
	0xB0 "~" \
	0xB1 "int(" \
	0xB2 "abs(" \
	0xB3 "det(" \
	0xB4 "identity(" \
	0xB5 "dim(" \
	0xB6 "sum(" \
	0xB7 "prod(" \
	0xB8 "not(" \
	0xB9 "iPart(" \
	0xBA "fPart(" \
	0xBC "sqrt(" \
	0xBD "cuberoot(" \
	0xBE "ln(" \
	0xBF "e^(" \
	0xC0 "log(" \
	0xC1 "10^(" \
	0xC2 "sin(" \
	0xC3 "sin^-1(" \
	0xC4 "cos(" \
	0xC5 "cos^-1(" \
	0xC6 "tan(" \
	0xC7 "tan^-1(" \
	0xC8 "sinh(" \
	0xC9 "sinh^-1(" \
	0xCA "cosh(" \
	0xCB "cosh^-1(" \
	0xCC "tanh(" \
	0xCD "tanh^-1(" \
	0xCE "If " \
	0xCF "Then" \
	0xD0 "Else" \
	0xD1 "While " \
	0xD2 "Repeat " \
	0xD3 "For(" \
	0xD4 "End" \
	0xD5 "Return" \
	0xD6 "Lbl " \
	0xD7 "Goto " \
	0xD8 "Pause " \
	0xD9 "Stop" \
	0xDA "IS>(" \
	0xDB "DS<(" \
	0xDC "Input " \
	0xDD "Prompt " \
	0xDE "Disp " \
	0xDF "DispGraph" \
	0xE0 "Output(" \
	0xE1 "ClrHome" \
	0xE2 "Fill(" \
	0xE3 "SortA(" \
	0xE4 "SortD(" \
	0xE5 "DispTable" \
	0xE6 "Menu(" \
	0xE7 "Send(" \
	0xE8 "Get(" \
	0xE9 "PlotsOn " \
	0xEA "PlotsOff " \
	0xEB "|L" \
	0xEC "Plot1(" \
	0xED "Plot2(" \
	0xEE "Plot3(" \
	0xF0 "^" \
	0xF1 "xroot" \
	0xF2 "1-Var Stats " \
	0xF3 "2-Var Stats " \
	0xF4 "LinReg(a+bx) " \
	0xF5 "ExpReg " \
	0xF6 "LnReg " \
	0xF7 "PwrReg " \
	0xF8 "Med-Med " \
	0xF9 "QuadReg " \
	0xFA "ClrList " \
	0xFB "ClrTable" \
	0xFC "Histogram" \
	0xFD "xyLine" \
	0xFE "Scatter" \
	0xFF "LinReg(ax+b) "
]

set	BAZIC_5C [dict create\
	0x00 "\[A]" \
	0x01 "\[B]" \
	0x02 "\[C]" \
	0x03 "\[D]" \
	0x04 "\[E]" \
	0x05 "\[F]" \
	0x06 "\[G]" \
	0x07 "\[H]" \
	0x08 "\[I]" \
	0x09 "\[J]" \
]

set	BAZIC_5D [dict create\
	0x00 "L1" \
	0x01 "L2" \
	0x02 "L3" \
	0x03 "L4" \
	0x04 "L5" \
	0x05 "L6" \
]

set	BAZIC_5E [dict create\
	0x10 "{Y1}" \
	0x11 "{Y2}" \
	0x12 "{Y3}" \
	0x13 "{Y4}" \
	0x14 "{Y5}" \
	0x15 "{Y6}" \
	0x16 "{Y7}" \
	0x17 "{Y8}" \
	0x18 "{Y9}" \
	0x19 "{Y0}" \
	0x20 "{X1T}" \
	0x21 "{Y1T}" \
	0x22 "{X2T}" \
	0x23 "{Y2T}" \
	0x24 "{X3T}" \
	0x25 "{Y3T}" \
	0x26 "{X4T}" \
	0x27 "{Y4T}" \
	0x28 "{X5T}" \
	0x29 "{Y5T}" \
	0x2A "{X6T}" \
	0x2B "{Y6T}" \
	0x40 "{r1}" \
	0x41 "{r2}" \
	0x42 "{r3}" \
	0x43 "{r4}" \
	0x44 "{r5}" \
	0x45 "{r6}" \
	0x80 "|u" \
	0x81 "|v" \
	0x82 "|w" \
]

set	BAZIC_60 [dict create \
	0x00 "Pic1" \
	0x01 "Pic2" \
	0x02 "Pic3" \
	0x03 "Pic4" \
	0x04 "Pic5" \
	0x05 "Pic6" \
	0x06 "Pic7" \
	0x07 "Pic8" \
	0x08 "Pic9" \
	0x09 "Pic0" \
]

set	BAZIC_61 [dict create \
	0x00 "GDB1" \
	0x01 "GDB2" \
	0x02 "GDB3" \
	0x03 "GDB4" \
	0x04 "GDB5" \
	0x05 "GDB6" \
	0x06 "GDB7" \
	0x07 "GDB8" \
	0x08 "GDB9" \
	0x09 "GDB0" \
]

set	BAZIC_62_ice [dict create \
	0x0A "DefineSprite(" \
	0x0B "Call " \
	0x0C "Data(" \
	0x0D "Copy(" \
	0x0E "Alloc(" \
	0x0F "DefineTilemap(" \
	0x10 "CopyData(" \
	0x11 "LoadData(" \
	0x12 "SetBrightness(" \
	0x13 "Compare(" \
]

set	BAZIC_62 [dict create \
	0x01 "\[RegEQ]" \
	0x02 "\[n]" \
	0x03 "\[xhat]" \
	0x04 "\[Sigmax]" \
	0x05 "\[Sigmax^2]" \
	0x06 "\[Sx]" \
	0x07 "\[sigmax]" \
	0x08 "\[minX]" \
	0x09 "\[maxX]" \
	0x0A "\[minY]" \
	0x0B "\[maxY]" \
	0x0C "\[yhat]" \
	0x0D "\[Sigmay]" \
	0x0E "\[Sigmay^2]" \
	0x0F "\[Sy]" \
	0x10 "\[sigmay]" \
	0x11 "\[Sigmaxy]" \
	0x12 "\[r]" \
	0x13 "\[Med]" \
	0x14 "\[Q1]" \
	0x15 "\[Q3]" \
	0x16 "\[|a]" \
	0x17 "\[|b]" \
	0x18 "\[|c]" \
	0x19 "\[|d]" \
	0x1A "\[|e]" \
	0x1B "\[x1]" \
	0x1C "\[x2]" \
	0x1D "\[x3]" \
	0x1E "\[y1]" \
	0x1F "\[y2]" \
	0x20 "\[y3]" \
	0x21 "\[recursiven]" \
	0x22 "\[p]" \
	0x23 "\[z]" \
	0x24 "\[t]" \
	0x25 "\[chi^2]" \
	0x26 "\[|F]" \
	0x27 "\[df]" \
	0x28 "\[phat]" \
	0x29 "\[phat1]" \
	0x2A "\[phat2]" \
	0x2B "\[xhat1]" \
	0x2C "\[Sx1]" \
	0x2D "\[n1]" \
	0x2E "\[xhat2]" \
	0x2F "\[Sx2]" \
	0X30 "\[n2]" \
	0x31 "\[Sxp]" \
	0x32 "\[lower]" \
	0x33 "\[upper]" \
	0x34 "\[s]" \
	0x35 "\[r^2]" \
	0x36 "\[R^2]" \
	0x37 "\[factordf]" \
	0x38 "\[factorSS]" \
	0x39 "\[factorMS]" \
	0x3A "\[errordf]" \
	0x3B "\[errorSS]" \
	0x3C "\[errorMS]" \
]

set	BAZIC_63 [dict create \
	0x00 "ZXscl" \
	0x01 "ZYscl" \
	0x02 "Xscl" \
	0x03 "Yscl" \
	0x04 "u(nMin)" \
	0x05 "v(nMin)" \
	0x06 "Un-1" \
	0x07 "Vn-1" \
	0x08 "Zu(nMin)" \
	0x09 "Zv(nMin)" \
	0x0A "Xmin" \
	0x0B "Xmax" \
	0x0C "Ymin" \
	0x0D "Ymax" \
	0x0E "Tmin" \
	0x0F "Tmax" \
	0x10 "thetaMin" \
	0x11 "thetaMax" \
	0x12 "ZXmin" \
	0x13 "ZXmax" \
	0x14 "ZYmin" \
	0x15 "ZYmax" \
	0x16 "Zthetamin" \
	0x17 "Zthetamax" \
	0x18 "ZTmin" \
	0x19 "ZTmax" \
	0x1A "TblStart" \
	0x1B "PlotStart" \
	0x1C "ZPlotStart" \
	0x1D "nMax" \
	0x1E "ZnMax" \
	0x1F "nMin" \
	0x20 "ZnMin" \
	0x21 "DeltaTbl" \
	0x22 "Tstep" \
	0x23 "thetastep" \
	0x24 "ZTstep" \
	0x25 "Zthetastep" \
	0x26 "DeltaX" \
	0x27 "DeltaY" \
	0x28 "XFact" \
	0x29 "YFact" \
	0x2A "TblInput" \
	0x2B "|N" \
	0x2C "I%" \
	0x2D "PV" \
	0x2E "PMT" \
	0x2F "FV" \
	0x30 "|P/Y" \
	0x31 "|C/Y" \
	0x32 "w(nMin)" \
	0x33 "Zw(nMin)" \
	0x34 "PlotStep" \
	0x35 "ZPlotStep" \
	0x36 "Xres" \
	0x37 "ZXres" \
	0x38 "TraceStep" \
]

set	BAZIC_7E [dict create \
	0x00 "Sequential" \
	0x01 "Simul" \
	0x02 "PolarGC" \
	0x03 "RectGC" \
	0x04 "CoordOn" \
	0x05 "CoordOff" \
	0x06 "Thick" \
	0x07 "Dot-Thick" \
	0x08 "AxesOn " \
	0x09 "AxesOff" \
	0x0A "GridDot " \
	0x0B "GridOff" \
	0x0C "LabelOn" \
	0x0D "LabelOff" \
	0x0E "Web" \
	0x0F "Time" \
	0x10 "uvAxes" \
	0x11 "vwAxes" \
	0x12 "uwAxes" \
]

set	BAZIC_AA [dict create \
	0x00 "Str1" \
	0x01 "Str2" \
	0x02 "Str3" \
	0x03 "Str4" \
	0x04 "Str5" \
	0x05 "Str6" \
	0x06 "Str7" \
	0x07 "Str8" \
	0x08 "Str9" \
	0x09 "Str0" \
]

set	BAZIC_BB [dict create \
	0x00 "npv(" \
	0x01 "irr(" \
	0x02 "bal(" \
	0x03 "SigmaPrn(" \
	0x04 "SigmaInt(" \
	0x05 ">Nom(" \
	0x06 ">Eff(" \
	0x07 "dbd(" \
	0x08 "lcm(" \
	0x09 "gcd(" \
	0x0A "randInt(" \
	0x0B "randBin(" \
	0x0C "sub(" \
	0x0D "stdDev(" \
	0x0E "variance(" \
	0x0F "inString(" \
	0x10 "normalcdf(" \
	0x11 "invNorm(" \
	0x12 "tcdf(" \
	0x13 "chi^2cdf(" \
	0x14 "Fcdf(" \
	0x15 "binompdf(" \
	0x16 "binomcdf(" \
	0x17 "poissonpdf(" \
	0x18 "poissoncdf(" \
	0x19 "geometpdf(" \
	0x1A "geometcdf(" \
	0x1B "normalpdf(" \
	0x1C "tpdf(" \
	0x1D "chi^2pdf(" \
	0x1E "Fpdf(" \
	0x1F "randNorm(" \
	0x20 "tvm_Pmt" \
	0x21 "tvm_I%" \
	0x22 "tvm_PV" \
	0x23 "tvm_N" \
	0x24 "tvm_FV" \
	0x25 "conj(" \
	0x26 "real(" \
	0x27 "imag(" \
	0x28 "angle(" \
	0x29 "cumSum(" \
	0x2A "expr(" \
	0x2B "length(" \
	0x2C "DeltaList(" \
	0x2D "ref(" \
	0x2E "rref(" \
	0x2F ">Rect" \
	0x30 ">Polar" \
	0x31 "\[e]" \
	0x32 "SinReg " \
	0x33 "Logistic " \
	0x34 "LinRegTTest " \
	0x35 "ShadeNorm(" \
	0x36 "Shade_t(" \
	0x37 "Shadechi^2(" \
	0x38 "ShadeF(" \
	0x39 "Matr>list(" \
	0x3A "List>matr(" \
	0x3B "Z-Test(" \
	0x3C "T-Test " \
	0x3D "2-SampZTest(" \
	0x3E "1-PropZTest(" \
	0x3F "2-PropZTest(" \
	0x40 "chi^2-Test(" \
	0x41 "ZInterval " \
	0x42 "2-SampZInt(" \
	0x43 "1-PropZInt(" \
	0x44 "2-PropZInt(" \
	0x45 "GraphStyle(" \
	0x46 "2-SampTTest " \
	0x47 "2-SampFTest " \
	0x48 "TInterval " \
	0x49 "2-SampTInt " \
	0x4A "SetUpEditor " \
	0x4B "Pmt_End" \
	0x4C "Pmt_Bgn" \
	0x4D "Real" \
	0x4E "re^thetai" \
	0x4F "a+bi" \
	0x50 "ExprOn" \
	0x51 "ExprOff" \
	0x52 "ClrAllLists" \
	0x53 "GetCalc(" \
	0x54 "DelVar " \
	0x55 "Equ>String(" \
	0x56 "String>Equ(" \
	0x57 "Clear Entries" \
	0x58 "Select(" \
	0x59 "ANOVA(" \
	0x5A "ModBoxPlot" \
	0x5B "NormProbPlot" \
	0x64 "G-T" \
	0x65 "ZoomFit" \
	0x66 "DiagnosticOn" \
	0x67 "DiagnosticOff" \
	0x68 "Archive " \
	0x69 "UnArchive " \
	0x6A "Asm(" \
	0x6B "AsmComp(" \
	0x6C "AsmPrgm" \
	0x6E "Á" \
	0x6F "À" \
	0x70 "Â" \
	0x71 "Ä" \
	0x72 "á" \
	0x73 "à" \
	0x74 "â" \
	0x75 "ä" \
	0x76 "É" \
	0x77 "È" \
	0x78 "Ê" \
	0x79 "Ë" \
	0x7A "é" \
	0x7B "è" \
	0x7C "ê" \
	0x7D "ë" \
	0x7F "Ì" \
	0x80 "Î" \
	0x81 "Ï" \
	0x82 "í" \
	0x83 "ì" \
	0x84 "î" \
	0x85 "ï" \
	0x86 "Ó" \
	0x87 "Ò" \
	0x88 "Ô" \
	0x89 "Ö" \
	0x8A "ó" \
	0x8B "ò" \
	0x8C "ô" \
	0x8D "ö" \
	0x8E "Ú" \
	0x8F "Ù" \
	0x90 "Û" \
	0x91 "Ü" \
	0x92 "ú" \
	0x93 "ù" \
	0x94 "û" \
	0x95 "ü" \
	0x96 "Ç" \
	0x97 "ç" \
	0x98 "Ñ" \
	0x99 "ñ" \
	0x9A "^^'" \
	0x9B "^^`" \
	0x9C "^^:" \
	0x9D "|?" \
	0x9E "|!" \
	0x9F "alpha" \
	0xA0 "beta" \
	0xA1 "gamma" \
	0xA2 "Delta" \
	0xA3 "delta" \
	0xA4 "epsilon" \
	0xA5 "lambda" \
	0xA6 "mu" \
	0xA7 "greek_pi" \
	0xA8 "rho" \
	0xA9 "Sigma" \
	0xAB "Phi" \
	0xAC "Omega" \
	0xAD "phat" \
	0xAE "chi" \
	0xAF "|F" \
	0xB0 "a" \
	0xB1 "b" \
	0xB2 "c" \
	0xB3 "d" \
	0xB4 "e" \
	0xB5 "f" \
	0xB6 "g" \
	0xB7 "h" \
	0xB8 "i" \
	0xB9 "j" \
	0xBA "k" \
	0xBC "l" \
	0xBD "m" \
	0xBE "n" \
	0xBF "o" \
	0xC0 "p" \
	0xC1 "q" \
	0xC2 "r" \
	0xC3 "s" \
	0xC4 "t" \
	0xC5 "u" \
	0xC6 "v" \
	0xC7 "w" \
	0xC8 "x" \
	0xC9 "y" \
	0xCA "z" \
	0xCB "sigma" \
	0xCC "tau" \
	0xCD "Í" \
	0xCE "GarbageCollect" \
	0xCF "|~" \
	0xD1 "@" \
	0xD2 "#" \
	0xD3 "$" \
	0xD4 "&" \
	0xD5 "`" \
	0xD6 ";" \
	0xD7 "\\" \
	0xD8 "|" \
	0xD9 "_" \
	0xDA "%" \
	0xDB "..." \
	0xDC "|<" \
	0xDD "sharps" \
	0xDE "^^x" \
	0xDF "smallT" \
	0xE0 "small0" \
	0xE1 "small1" \
	0xE2 "small2" \
	0xE3 "small3" \
	0xE4 "small4" \
	0xE5 "small5" \
	0xE6 "small6" \
	0xE7 "small7" \
	0xE8 "small8" \
	0xE9 "small9" \
	0xEA "small10" \
	0xEB "\[<|]" \
	0xEC "\[|>]" \
	0xED "uparrow" \
	0xEE "downarrow" \
	0xF0 "xmark" \
	0xF1 "integral" \
	0xF2 "bolduparrow" \
	0xF3 "bolddownarrow" \
	0xF4 "squareroot" \
	0xF5 "invertedequal" \
]

set	BAZIC_EF [dict create \
	0x00 "setDate(" \
	0x01 "setTime(" \
	0x02 "checkTmr(" \
	0x03 "setDtFmt(" \
	0x04 "setTmFmt(" \
	0x05 "timeCnv(" \
	0x06 "dayOfWk(" \
	0x07 "getDtStr(" \
	0x08 "getTmStr(" \
	0x09 "getDate" \
	0x0A "getTime" \
	0x0B "startTmr" \
	0x0C "getDtFmt" \
	0x0D "getTmFmt" \
	0x0E "isClockOn" \
	0x0F "ClockOff" \
	0x10 "ClockOn" \
	0x11 "OpenLib(" \
	0x12 "ExecLib" \
	0x13 "invT(" \
	0x14 "chi^2GOF-Test(" \
	0x15 "LinRegTInt " \
	0x16 "Manual-Fit " \
	0x17 "ZQuadrant1" \
	0x18 "ZFrac1/2" \
	0x19 "ZFrac1/3" \
	0x1A "ZFrac1/4" \
	0x1B "ZFrac1/5" \
	0x1C "ZFrac1/8" \
	0x1D "ZFrac1/10" \
	0x1E "mathprintbox" \
	0x2E "n/d" \
	0x2F "Un/d" \
	0x30 ">n/d<>Un/d" \
	0x31 ">F<>D" \
	0x32 "remainder(" \
	0x33 "Sigma(" \
	0x34 "logBASE(" \
	0x35 "randIntNoRep(" \
	0x37 "\[MATHPRINT]" \
	0x38 "\[CLASSIC]" \
	0x39 "\[n/d]" \
	0x3A "\[Un/d]" \
	0x3B "\[AUTO]" \
	0x3C "\[DEC]" \
	0x3D "\[FRAC-APPROX]" \
	0x3F "STATWIZARD ON" \
	0x40 "STATWIZARD OFF" \
	0x41 "BLUE" \
	0x42 "RED" \
	0x43 "BLACK" \
	0x44 "MAGENTA" \
	0x45 "GREEN" \
	0x46 "ORANGE" \
	0x47 "BROWN" \
	0x48 "NAVY" \
	0x49 "LTBLUE" \
	0x4A "YELLOW" \
	0x4B "WHITE" \
	0x4C "LTGRAY" \
	0x4D "MEDGRAY" \
	0x4E "GRAY" \
	0x4F "DARKGRAY" \
	0x50 "Image1" \
	0x51 "Image2" \
	0x52 "Image3" \
	0x53 "Image4" \
	0x54 "Image5" \
	0x55 "Image6" \
	0x56 "Image7" \
	0x57 "Image8" \
	0x58 "Image9" \
	0x59 "Image0" \
	0x5A "GridLine " \
	0x5B "BackgroundOn " \
	0x64 "BackgroundOff" \
	0x65 "GraphColor(" \
	0x66 "QuickPlot&Fit-EQ" \
	0x67 "TextColor(" \
	0x68 "Asm84CPrgm" \
	0x69 "Asm84CCmp" \
	0x6A "DetectAsymOn" \
	0x6B "DetectAsymOff" \
	0x6C "BorderColor " \
	0x73 "plottinydot" \
	0x74 "Thin" \
	0x75 "Dot-Thin" \
	0x79 "PlySmlt2" \
	0x7A "Asm84CEPrgm" \
	0x7B "Asm84CeCmp" \
	0x81 "Quartiles Setting..." \
	0x82 "u(n-2)" \
	0x83 "v(n-2)" \
	0x84 "w(n-2)" \
	0x85 "u(n-1)" \
	0x86 "v(n-1)" \
	0x87 "w(n-1)" \
	0x88 "u(n)" \
	0x89 "v(n)" \
	0x8A "w(n)" \
	0x8B "u(n+1)" \
	0x8C "v(n+1)" \
	0x8D "w(n+1)" \
	0x8E "pieceWise(" \
	0x8F "SEQ(n)" \
	0x90 "SEQ(n+1)" \
	0x91 "SEQ(n+2)" \
	0x92 "LEFT" \
	0x93 "CENTER" \
	0x94 "RIGHT" \
	0x95 "invBinom(" \
	0x96 "Wait " \
	0x97 "toString(" \
	0x98 "eval(" \
	0x9E "Execute Program" \
	0x9F "Undo Clear" \
	0xA0 "Insert Line Above" \
	0xA1 "Cut Line" \
	0xA2 "Copy Line" \
	0xA3 "Paste Line Below" \
	0xA4 "Insert Comment Above" \
	0xA5 "Quit Editor" \
	0xA6 "piecewise(" \
]

	proc BAZICdict {a b {c -1}} {
		if [dict exists $b $a] {
			return	[dict get $b $a]
		} elseif {$c == -1} {
			return	%$a%
		} else {
			return	%$c[format "%02X" $a]%
		}
	}

	#set	term [hex 1]
	if {$term in {0x5C 0x5D 0x5E 0x60 0x61 0x63 0x7E 0xAA 0xBB 0xEF}} {
		set	token [BAZICdict [hex 1] [set "BAZIC_[format "%02X" $term]"] $term]
	} elseif {$term == 0x62} {
		# separate for ICE tokens
		set	term2 [hex 1]
		if {$iceT == 1 && [dict exists $BAZIC_62_ice $term2] } {
			set	token [BAZICdict $term2 $BAZIC_62_ice 62]
		} else {
			set	token [BAZICdict $term2 $BAZIC_62 62]
		}
	} else {
		set	token [BAZICdict $term $BAZIC_00]
	}
	return $token
}

proc BAZIC83 {size} {
	section -collapsed "Code" {
		set	start [pos]
		if {$size!=0} {
			set	iceT [expr [uint8] == 44]
			move	-1
		}

		set	e 0
		while {[pos]-$start < $size} {
			incr	e
			set	line ""
			set	term 0
			set	Linestart [pos]
			while {($term != 0x3F) && ([pos]-$start < $size)} {
				set	term [hex 1]
				set	line $line[BAZIC83_GetToken $term $iceT]
			}
			entry	"Line $e" $line [expr [pos]-$Linestart] $Linestart
		}
		# if it was a single line, display it as the section value
		if {$e == 1} {
			sectionvalue $line
		} elseif {$size != 0} {
			sectionvalue "\[expand for code]"
		}
	}
	goto [expr $start + $size]
}
