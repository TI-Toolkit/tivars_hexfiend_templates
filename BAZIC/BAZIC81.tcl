# TI-81 TI-BASIC Detokenizer HexFiend template include
# Version 1.0
# (c) 2021-2023 LogicalJoe
# .hidden = true;

proc BAZIC81_GetToken {term} {
set	BAZIC_00 [dict create \
	0x07 "Prgm" \
	0x08 "Box" \
	0x09 "Zoom In" \
	0x0A "Zoom Out" \
	0x0B "Set Factors" \
	0x0C "Square" \
	0x0D "Standard" \
	0x0E "Trig" \
	0x0F "Integer" \
	0x10 "0" \
	0x11 "1" \
	0x12 "2" \
	0x13 "3" \
	0x14 "4" \
	0x15 "5" \
	0x16 "6" \
	0x17 "7" \
	0x18 "8" \
	0x19 "9" \
	0x1A "." \
	0x1B "|E" \
	0x1C "->" \
	0x1D ")" \
	0x1E "," \
	0x1F "(" \
	0x20 "=" \
	0x21 "!=" \
	0x22 "<" \
	0x23 "<=" \
	0x24 ">" \
	0x25 ">=" \
	0x26 "+" \
	0x27 "-" \
	0x28 "*" \
	0x29 "/" \
	0x2A " nCr " \
	0x2B " nPr " \
	0x2C "\"" \
	0x2D "IPart " \
	0x2E "Int " \
	0x2F "FPart " \
	0x30 "~" \
	0x31 "abs " \
	0x32 "sqrt" \
	0x33 "cbrt" \
	0x34 "ln " \
	0x35 "e^" \
	0x36 "log " \
	0x37 "10^" \
	0x38 "sin " \
	0x39 "asin " \
	0x3A "cos" \
	0x3B "acos " \
	0x3C "tan " \
	0x3D "atan " \
	0x3E "sinh " \
	0x3F "asinh " \
	0x40 "cosh " \
	0x41 "acosh " \
	0x42 "tanh " \
	0x43 "atanh " \
	0x44 "det" \
	0x45 "?" \
	0x46 "^" \
	0x47 "^^-1" \
	0x48 "" \
	0x49 "^^T" \
	0x4A "^^3" \
	0x4B "!" \
	0x4C "^^r" \
	0x4D "^^o" \
	0x4E "Round(" \
	0x4F "R>P(" \
	0x50 "P>R(" \
	0x51 "RowSwap(" \
	0x52 "Row+(" \
	0x53 "*Row(" \
	0x54 "*Row+(" \
	0x55 "NDeriv(" \
	0x56 " " \
	0x57 "Ans" \
	0x58 "Rand" \
	0x59 "A" \
	0x5A "B" \
	0x5B "C" \
	0x5C "D" \
	0x5D "E" \
	0x5E "F" \
	0x5F "G" \
	0x60 "H" \
	0x61 "I" \
	0x62 "J" \
	0x63 "K" \
	0x64 "L" \
	0x65 "M" \
	0x66 "N" \
	0x67 "O" \
	0x68 "P" \
	0x69 "Q" \
	0x6A "R" \
	0x6B "S" \
	0x6C "T" \
	0x6D "U" \
	0x6E "V" \
	0x6F "W" \
	0x70 "X" \
	0x71 "Y" \
	0x72 "Z" \
	0x73 "\[theta]" \
	0x74 "Arow" \
	0x75 "Acol" \
	0x76 "Brow" \
	0x77 "Bcol" \
	0x78 "Crow" \
	0x79 "Ccol" \
	0x7A "Sigmax^2" \
	0x7B "Tmax" \
	0x7C "Tstep" \
	0x7D "Xmin" \
	0x7E "Xmax" \
	0x7F "Xscl" \
	0x80 "Ymin" \
	0x81 "Ymax" \
	0x82 "Yscl" \
	0x83 "Xres" \
	0x84 "{x}(" \
	0x85 "{y}(" \
	0x86 "\[A]" \
	0x87 "\[B]" \
	0x88 "\[C]" \
	0x89 "\[Sigmax]" \
	0x8A "\[Sigmax^2]" \
	0x8B "\[Sigmaxy]" \
	0x8C "\[Sigmay]" \
	0x8D "\[Sigmay^2]" \
	0x8E "\[n]" \
	0x8F "\[xhat]" \
	0x90 "\[sigmax]" \
	0x91 "\[Sx]" \
	0x92 "\[yhat]" \
	0x93 "\[sigmay]" \
	0x94 "\[Sy]" \
	0x95 "\[|b]" \
	0x96 "\[|a]" \
	0x97 "\[r]" \
	0x98 "Dim{x}" \
	0x99 "pi" \
	0x9A "1-Var" \
	0x9B "LinReg" \
	0x9C "ExpReg" \
	0x9D "LnReg" \
	0x9E "PwrReg" \
	0x9F "xSort" \
	0xA0 "ySort" \
	0xA1 "ClrStat" \
	0xA2 "RegEQ" \
	0xA3 "Hist" \
	0xA4 "xyLine" \
	0xA5 "Scatter" \
	0xA6 "Rad" \
	0xA7 "Deg" \
	0xA8 "Norm" \
	0xA9 "Sci" \
	0xAA "Eng" \
	0xAB "Float" \
	0xAC "Fix " \
	0xAD "Function" \
	0xAE "Param" \
	0xAF "Connected" \
	0xB0 "Dot" \
	0xB1 "Sequence" \
	0xB2 "Simul" \
	0xB3 "Grid Off" \
	0xB4 "Grid On" \
	0xB5 "Rect" \
	0xB6 "Polar" \
	0xB7 "Disp " \
	0xB8 "Input " \
	0xB9 "Pause" \
	0xBA "End" \
	0xBB "Stop" \
	0xBC "Lbl " \
	0xBD "Goto " \
	0xBE "If " \
	0xBF "IS>(" \
	0xC0 "DS<(" \
	0xC1 "Y1" \
	0xC2 "Y2" \
	0xC3 "Y3" \
	0xC4 "Y4" \
	0xC5 "X1T" \
	0xC6 "Y1T" \
	0xC7 "X2Y" \
	0xC8 "Y2T" \
	0xC9 "X3T" \
	0xCA "Y3T" \
	0xCB "All-On" \
	0xCC "Y1-On" \
	0xCD "Y2-On" \
	0xCE "Y3-On" \
	0xCF "Y4-On" \
	0xD0 "X1T-On" \
	0xD1 "X2T-On" \
	0xD2 "X3T-On" \
	0xD3 "All-Off" \
	0xD4 "Y1-Off" \
	0xD5 "Y2-Off" \
	0xD6 "Y3-Off" \
	0xD7 "Y4-Off" \
	0xD8 "X1T-Off" \
	0xD9 "X2T-Off" \
	0xDA "X3T-Off" \
	0xDB "Line(" \
	0xDC "PT-On(" \
	0xDD "PT-Off(" \
	0xDE "Pt-Chg(" \
	0xDF "DrawF " \
	0xE0 "Shade(" \
	0xE1 "ClrDraw" \
	0xE2 "Clrhome" \
	0xE3 "DispHome" \
	0xE4 "DispGraph" \
	0xE5 "Reset" \
	0xE6 "No" \
	0xE7 "Prgm" \
	0xE8 "Prgm" \
	0xE9 " " \
	0xEA "Edit" \
	0xEC "\n" \
]
	if [dict exists $BAZIC_00 $term] {
		return	[dict get $BAZIC_00 $term]
	} else {
		return	%$term%
	}
}

proc BAZIC81 {size} {
	section Code {
		set	start [pos]
		set line ""
		set	e 0
		while {[pos] < $size+20} {
			incr	e
			set	line ""
			set	term 0
			set	Linestart [pos]
			while {($term != 0xEC) && ([pos]-$start < $size)} {
				set	term [hex 1]
				set line $line[BAZIC81_GetToken $term]
			}
			entry	"Line $e" $line [expr [pos]-$Linestart] $Linestart
		}
	}
}